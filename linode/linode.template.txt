#!/usr/bin/env ruby
require 'rubygems'
require 'linode'

#######################################
### This script will build a linode ###
### server using the linode api     ###
### wrapper.                        ###
#######################################

myapi_key = ''

mytoken = Linode.new(api_key: "#{myapi_key}")

datacenterlist = mytoken.avail.datacenters

datacenter = datacenterlist.each.select { |x| x['datacenterid'] if x['location'] == 'Dallas, TX, USA' }

# This is for troubleshooting
# puts "My datacenterid is: #{datacenter[0]['datacenterid']}"

linodeplan = mytoken.avail.linodeplans

myplan = linodeplan.each.select { |y| y['price'].to_i == 10.0 }

# This is for pricing and plan id
# puts "The plan you have used #{myplan[0]['planid']}"

linodekernels = mytoken.avail.kernels
# linodekernels.each { |z| puts z }

k_id = linodekernels.each.select { |z| z['label'].match('Latest 64 bit') }

# puts "KernelId: #{k_id[0]['kernelid']}"

mynode = mytoken.linode.create(datacenterid: "#{datacenter[0]['datacenterid']}",
                               planid: "#{myplan[0]['planid']}")
# puts "#{mynode['linodeid']}"
_newdisk1 = mytoken.linode.disk.createfromdistribution(linodeid: "#{mynode['linodeid']}",
                                                       kernelid: "#{k_id[0]['kernelid']}",
                                                       label: 'automated build',
                                                       distributionid: 127,
                                                       size: 102_40,
                                                       rootpass: 'Purple80!')

_newdisk2 = mytoken.linode.disk.create(linodeid: "#{mynode['linodeid']}",
                                       label: 'automated swap',
                                       type: 'swap',
                                       size: 512,
                                       rootpass: 'Purple80!')

# get list of disks
disklist = mytoken.linode.disk.list(linodeid: "#{mynode['linodeid']}")

mydisk = (0..(disklist.count - 1)).each.map { |n| disklist[n]['diskid'] }
joineddisk = mydisk.join(',')

# Creates config for system to boot
config = mytoken.linode.config.create(linodeid: "#{mynode['linodeid']}",
                                      kernelid: "#{k_id[0]['kernelid']}",
                                      label: "mylinode#{mynode['linodeid']}",
                                      rootdevicenum: 1,
                                      disklist: "#{joineddisk}",
                                      rootdevicero: true)

# puts "Config return: #{config['configid']}"

mytoken.linode.boot(linodeid: "#{mynode['linodeid']}",
                    configid: "#{config['configid']}")
